import struct

if __name__ == "__main__":
    # header_raw = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01n\x00\x04\x00\x00\x00"
    # print(f"len(data) = {len(header_raw)}")
    # fmt_header = "<128sBHI"
    # fmt_size = struct.calcsize(fmt_header)
    # print(f"calcsize(fmt_size) = {fmt_size}")

    # header = struct.unpack(fmt_header, header_raw)
    # print(header)
    # client_id, version, code_type, payload_size = struct.unpack(fmt_header, data)
    # print(f'\'{client_id.decode("ascii")}\'', version, code_type, payload_size)

    # payload_raw = b'\x80@\x00q\xf4\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\\@o\xf4\x7f\x00\x00\x06\x00\x00\x00\x10\x00\x00\x000A`o\xf4\x7f\x00\x00\x02\x00\x00\x00\xfe\x7f\x00\x00`m\xdd\xe6\xfe\x7f\x00\x00ad6\x11\x01\x00\x00\x00Ho\xdd\xe6\xfe\x7f\x00\x00\x18\x92\xe5\x08\x01\x00\x00\x00\xf0n\xdd\xe6\xfe\x7f\x00\x00\x80\x90\xe5\x08\x01\x00\x00\x00@\x92\xe5\x08\x01\x00\x00\x00 [@o\xf4\x7f\x00'
    # fmt_payload = f">128s"
    # payload = struct.unpack(fmt_payload, payload_raw)
    # print(payload)

    class A:
        var = 1

        @staticmethod
        def get_var():
            A.var += 1
            return A.var

    a = A.get_var()
    b = A.get_var()
    print(a, b)
